Weekly Summary
James Vaughn

------------------------------------------------------------------------------------
Week 9: 2018-04-27
Changes to the Gantt schedule:
We decided to not do the robustness measurement, as we want to focus on pngs for now

Files changed:
-src/main/java/lib/BitIterator
-I fixed a bug that was causing exceptions to occur when trying to iterate over empty messages

-src/main/java/tool/Tool
-I added the message comparator to give the % of the message destroyed by the warden.

Non-code work done:
-I started writing the final report this week
-I also tested the tool and helped get images

------------------------------------------------------------------------------------
Week 9: 2018-04-27
Changes to the Gantt schedule:
---

Files changed:
-src/main/java/frequency/DFT/DFTEncoder
I added in DFT encoding of all 3 color components so now we can encode messages in the full image capacity.
This finishes of DFT.

-src/main/java/lib/Encoder
-LSB, DFT, and DWT encoders
I added an encoder interface and modified 3 of our 4 encoders implement this interface. This was done to make creating our tool easier.

-src/main/java/tool/Robustness
I started the robustness calculation tool, which will give us the robustness score for each technique. I have the logic flow done.
I need to add compression and confirm that the core logic works as intended, but the code otherwise gives the logic flow.

Non-code work done:
---

------------------------------------------------------------------------------------
Week 8: 2018-04-20
Changes to the Gantt schedule:

Files changed:
-src/main/java/frequency/DFT/DFTEncoder
-src/main/java/frequency/DFT/Main
I added the basic logic for encoding a message into an image and decoding from an image using DFT.
I have the application set up, so that we can run the encoder from the command line.
The encoder is currently set up to work on the blue color component only, but it is easy to convert into all color components.

Non-code work done:
I spent a lot of time with Andy finding and understanding a paper on DFT in order to make the encoder.


------------------------------------------------------------------------------------
Week 7: 2018-04-13
Changes to the Gantt schedule:
Spent a bit longer of DWT than expected, so other responsibilities are being pushed back a week

Files changed:
-src/main/java/frequency/DWT/DWTEncoder
I added logic to encode message bits into different color planes if the message is too long for just one color to hold the info.
The DWT encoder can now encode in all three color planes. It is now completely done.

Non-code work done:
I spent some time manually verifying the correctness of the encoder and its output stego images

------------------------------------------------------------------------------------
Week 6: 2018-04-06
Changes to the Gantt schedule:
---

Files changed:
-src/main/java/frequency/DWT/DWTEncoder
-src/main/java/frequency/DWT/HaarTransformer
I have the encoder now completely able to encode and decode messages, however it is only being applied to the blue color component right now.
The encoder just needs to have other color planes added and some minor refactoring done.
I added haar transformer so I had full control over how the transformation and inverse transformation are performed,
 as otherwise bit information would get wiped out during the encoding process. As such, I am no longer using the library from last week.

Non-code work done:
I spent quite a bit of time trying to figure out the math necessary to preserve bit information throughout the haar transform.

------------------------------------------------------------------------------------
Week 5: 2018-03-30
Changes to the Gantt schedule:
---

Files changed:
-src/main/java/frequency/DWT/DWTEncoder
I have implemented part of the LSB encoder for the DWT for testing purposed.
The encoder will now encode a message into the LSB of the coefficients of the HH band of the Blue color component.
The decoder is able to attempt to decode the message.
Right now, I am running into issues with doing type conversions, and the library we are using destroying the encoded data.
I will need to either use a different library or figure out a way of encoding the data so that it doesnt get destroyed.

Non-code work done:
I spent a bit of time trying to see if there are any other libraries available to Java that do not have this issue.

------------------------------------------------------------------------------------
Week 4: 2018-03-21
Changes to the Gantt schedule:
---

Files changed:
-src/main/java/frequency/DWT/DWTEncoder
I messed with the interface for performing the Haar Transform
I have made the logic for handling the haar transform as a proof-of-concept for grey-scale images.
I just need to perform the LSB embedding now.

Work done:
I got haar transform logic to working well and am able to play with and experiment with the haar coefficients now.
Everything for haar is done. I just need to implement the embedding and DWT is done.
I added in a way to visualize the transform for explanation purposes in the report.

Non-code work done:
I spent a few hours talking with various professors and by myself reviewing the math and logic behind the haar transform.
I believe I now have a good grasp on how it works and the operations it performs and would be comfortable implementing it.
I was given the advice to use external libraries for this kind of work though, so I also looked through various libraries and picked one.

------------------------------------------------------------------------------------
Week 3: 2018-03-08
Changes to the Gantt schedule:
I am working on DWT before DCT due to DWT having less ambiguity

Files changed:
-src/main/java/frequency/DWT/*
I added a main method which will be able to do all of the application logic one the encoder is done.
I also have started working out the logic for the encoder. I added HaarTransform as a placeholder for when I implement it.

Work done:
I finished the application logic, so all I will need to do now is implement the encoder logic.
I wrote out the pseudo code that will implement the encode and decode functions.
I just need to figure out how the Haar Wavelet Transform works, and then I can start implementing all of the code

Non-code work done:
I spent some time working out the exact logic used in the paper which describes DWT and I have a good understanding now of how it works.
I am currently working with our math advisor to understand how the actual Discrete and Haar transforms work so I can implement or at least work out the logic for it.

------------------------------------------------------------------------------------
Week 2: 2018-03-02
Changes to the Gantt schedule:
I am continuing to work on some of the easier techniques to give me more time to research DWT as it is pretty involved.

Files changed:
-src/main/java/spatial/LSB/Main
I added the command line parsing to the encoder logic so the application can be controlled more easily for doing measurements

-src/main/java/spatial/LSB/LeastSignificantBitEncoder
I refactored the logic to be cleaner and pulled out the bit iterator and bit builder logic into another file

-src/main/java/lib/*
I added the bit iterator and bit builder utility classes to the project as a whole since they are useful for all techniques

-src/main/java/warden/BitDeletion/*
I created the bit deletion warden. I finished its implementation and the main application logic, so it is done.

Work done:
I added command line parsing to LSB. I also made the bit iterator and bit builder logic cleaner and available for use in the rest of the project.
Lastly, I completed the bit deletion warden and confirmed it is working as expected. It has consistent usage logic with the LSB encoder.
LSB and bit deletion are completely demoable and usable for collecting measurements.

Non-code work done:
I finished looking into the various techniques at a high level.
I am focusing my research more on DWT at the moment and am looking more into how it can be implemented.

------------------------------------------------------------------------------------
Week 1: 2018-02-23
Changes to the Gantt schedule:
I need more time to properly research frequency base stego techniques, so this week I implemented LSB instead as it is easy and gives me time to research more.

Files changed:
-src/main/spatial/LSB/Main
I added the main application logic for testing out the encoder. It has hardcoded locations for resources to use for encoding.
It needs to be generalized, but it works for demoing LSB encoding.

-src/main/spatial/LSB/LeastSignificantBitEncoder
I implemented LSB encoding and decoding completely.
The code should be cleaned up, and the bit iterator can be pulled into a different file.

Work done:
I have completely implemented a demoable version of LSB steganography.
It handles decoding and encoding independently, so we can use it to automatically encode and decode messages during our measurements.
The main application can be made more general, however this is a proof-of-concept.

Non-code work done:
I have been researching the different frequency domain techniques (DCT and DWT) so I have a better idea of what is needed and what issues we may encounter.

------------------------------------------------------------------------------------